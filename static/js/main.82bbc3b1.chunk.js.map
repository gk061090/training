{"version":3,"sources":["constants.js","componets/Form/Form.jsx","utils.js","componets/List/List.jsx","componets/App/App.jsx","reportWebVitals.js","index.js"],"names":["pushUps","squats","plank","fields","labels","emptyFields","reduce","prev","field","registerProps","required","validationSchema","yup","shape","obj","positive","integer","typeError","localStorageKey","Form","object","useForm","resolver","yupResolver","register","handleSubmit","errors","reset","useContext","DataContext","data","update","onSubmit","formValues","map","TextField","name","label","type","inputRef","defaultValue","error","Boolean","helperText","message","Button","variant","color","disabled","JSON","stringify","disableElevation","List","length","item","ListItem","Object","entries","key","value","Date","toLocaleDateString","join","date","initialData","parse","localStorage","getItem","createContext","App","useState","setData","Provider","prevState","state","now","setItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAGaA,EAAU,WACVC,EAAS,SACTC,EAAQ,QAERC,EAAS,CAACH,EAASC,EAAQC,GAC3BE,GAAM,mBAChBJ,EAAU,0DADM,cAEhBC,EAAS,gEAFO,cAGhBC,EAAQ,8DAHQ,GAKNG,EAAcF,EAAOG,QAChC,SAACC,EAAMC,GAAP,mBAAC,eAAsBD,GAAvB,kBAA8BC,EAAQ,SACtC,IAGWC,EAAgB,CAAEC,UAAU,GAE5BC,EAAmBC,MAAaC,MAC3CV,EAAOG,QACL,SAACQ,EAAKN,GAAN,mBAAC,eACIM,GADL,kBAEGN,EAAQI,MAENG,SAFM,oCAEYX,EAAOI,GAFnB,wLAGNQ,QAHM,oCAGWZ,EAAOI,GAHlB,wIAINE,SAJM,oCAIYN,EAAOI,GAJnB,yEAKNS,UALM,oCAKab,EAAOI,GALpB,6GAOX,KAISU,EAAkB,W,QClBlBC,EAAO,WAAO,ICjBGC,EDiBJ,EAC0BC,YAAQ,CACxDC,SAAUC,sBAAYZ,KADhBa,EADgB,EAChBA,SAAUC,EADM,EACNA,aAAcC,EADR,EACQA,OAAQC,EADhB,EACgBA,MADhB,EAKCC,qBAAWC,GAA5BC,EALgB,EAKhBA,KAAMC,EALU,EAKVA,OAOd,OACE,uBAAMC,SAAUP,GANH,SAACQ,GACdF,EAAOE,GACPN,EAAMtB,MAIN,UACGF,EAAO+B,KAAI,SAAC1B,GAAD,eACV,8BACE,cAAC2B,EAAA,EAAD,CACEC,KAAM5B,EACN6B,MAAOjC,EAAOI,GACd8B,KAAK,SACLC,SAAUf,EAASf,GACnB+B,aAAY,OAAEV,QAAF,IAAEA,GAAF,UAAEA,EAAO,UAAT,aAAE,EAAYtB,GAC1BiC,MAAOC,QAAQhB,EAAOlB,IACtBmC,WAAU,UAAEjB,EAAOlB,UAAT,aAAE,EAAeoC,WARrBpC,MAaZ,cAACqC,EAAA,EAAD,CACEP,KAAK,SACLQ,QAAQ,YACRC,MAAM,UACNC,UCjDsB5B,EDiDGM,ICjDmC,OAA3BuB,KAAKC,UAAU9B,KDkDhD+B,kBAAgB,EALlB,wE,kBEvCOC,EAAO,WAAO,IACjBtB,EAASF,qBAAWC,GAApBC,KAER,OAAKA,EAAKuB,OAKR,cAAC,IAAD,UACGvB,EAAKI,KAAI,SAACoB,GAAD,OACR,cAACC,EAAA,EAAD,UACGC,OAAOC,QAAQH,GACbpB,KAAI,mCAAEwB,EAAF,KAAOC,EAAP,WACK,SAARD,EAAA,oCACa,IAAIE,KAAKD,GAAOE,mBAAmB,UADhD,UAEOzD,EAAOsD,GAFd,aAEuBC,MAExBG,KAAK,QAPKR,EAAKS,WANjB,2DCLLC,EAAcf,KAAKgB,MAAL,UAAWC,aAAaC,QAAQjD,UAAhC,QAAoD,MAE3DW,EAAcuC,wBAAc,CACvCtC,KAAMkC,EACNjC,OAAQ,eAGGsC,EAAM,WAAO,IAAD,EACCC,mBAASN,GADV,mBAChBlC,EADgB,KACVyC,EADU,KAWvB,OACE,gCACE,oCACA,eAAC1C,EAAY2C,SAAb,CAAsBb,MAAO,CAAE7B,OAAMC,OAX1B,SAACE,GACdsC,GAAQ,SAACE,GACP,IAAMC,EAAK,cAAMX,KAAMH,KAAKe,OAAU1C,IAA3B,mBAA4CwC,IAEvD,OADAP,aAAaU,QAAQ1D,EAAiB+B,KAAKC,UAAUwB,IAC9CA,OAOP,UACE,cAAC,EAAD,IACA,cAAC,EAAD,WChBOG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.82bbc3b1.chunk.js","sourcesContent":["import * as yup from \"yup\";\n\n// exercise names for training\nexport const pushUps = \"push_ups\";\nexport const squats = \"squats\";\nexport const plank = \"plank\";\n\nexport const fields = [pushUps, squats, plank];\nexport const labels = {\n  [pushUps]: \"Отжимания\",\n  [squats]: \"Приседания\",\n  [plank]: \"Планка (сек.)\",\n};\nexport const emptyFields = fields.reduce(\n  (prev, field) => ({ ...prev, [field]: null }),\n  {}\n);\n\nexport const registerProps = { required: true };\n\nexport const validationSchema = yup.object().shape(\n  fields.reduce(\n    (obj, field) => ({\n      ...obj,\n      [field]: yup\n        .number()\n        .positive(`Поле \"${labels[field]}\" должно быть положительным числом`)\n        .integer(`Поле \"${labels[field]}\" должно быть целым числом`)\n        .required(`Поле \"${labels[field]}\" обязательно`)\n        .typeError(`Поле \"${labels[field]}\" должно быть числом`),\n    }),\n    {}\n  )\n);\n\nexport const localStorageKey = \"training\";\n","import React, { useContext } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\nimport { DataContext } from \"../App\";\nimport {\n  emptyFields,\n  fields,\n  labels,\n  registerProps,\n  validationSchema,\n} from \"../../constants\";\nimport { isEmptyObject } from \"../../utils\";\n\nexport const Form = () => {\n  const { register, handleSubmit, errors, reset } = useForm({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const { data, update } = useContext(DataContext);\n\n  const submit = (formValues) => {\n    update(formValues);\n    reset(emptyFields);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(submit)}>\n      {fields.map((field) => (\n        <div key={field}>\n          <TextField\n            name={field}\n            label={labels[field]}\n            type=\"number\"\n            inputRef={register(registerProps)}\n            defaultValue={data?.[0]?.[field]}\n            error={Boolean(errors[field])}\n            helperText={errors[field]?.message}\n          />\n        </div>\n      ))}\n\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={!isEmptyObject(errors)}\n        disableElevation\n      >\n        Отправить\n      </Button>\n    </form>\n  );\n};\n","export const isEmptyObject = (object) => JSON.stringify(object) === \"{}\";\n","import React, { useContext } from \"react\";\nimport { DataContext } from \"../App\";\nimport ListUI from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport { labels } from \"../../constants\";\n\nexport const List = () => {\n  const { data } = useContext(DataContext);\n\n  if (!data.length) {\n    return \"Нет данных\";\n  }\n\n  return (\n    <ListUI>\n      {data.map((item) => (\n        <ListItem key={item.date}>\n          {Object.entries(item)\n            .map(([key, value]) =>\n              key === \"date\"\n                ? `Дата: ${new Date(value).toLocaleDateString(\"ru-RU\")}`\n                : `${labels[key]}: ${value}`\n            )\n            .join(\" | \")}\n        </ListItem>\n      ))}\n    </ListUI>\n  );\n};\n","import React, { useState, createContext } from \"react\";\nimport { Form } from \"../Form\";\nimport { List } from \"../List\";\nimport { localStorageKey } from \"../../constants\";\n\nconst initialData = JSON.parse(localStorage.getItem(localStorageKey) ?? \"[]\");\n\nexport const DataContext = createContext({\n  data: initialData,\n  update: () => {},\n});\n\nexport const App = () => {\n  const [data, setData] = useState(initialData);\n\n  const update = (formValues) => {\n    setData((prevState) => {\n      const state = [{ date: Date.now(), ...formValues }, ...prevState];\n      localStorage.setItem(localStorageKey, JSON.stringify(state));\n      return state;\n    });\n  };\n\n  return (\n    <div>\n      <p>App</p>\n      <DataContext.Provider value={{ data, update }}>\n        <Form />\n        <List />\n      </DataContext.Provider>\n    </div>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./componets/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}